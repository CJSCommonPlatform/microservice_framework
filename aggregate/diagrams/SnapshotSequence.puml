@startuml
skinparam backgroundColor white
skinparam defaultFontName Arial
skinparam defaultFontsize 10

participant "CommandHandler" as CommandHandler
participant "SnapshotAggregateService" as SnapshotAggregateService
participant "DefaultAggregateService" as DefaultAggregateService
participant "SnapshotService" as SnapshotService
participant "SnapshotRepository" as SnapshotRepository
participant "AggregateSnapshot" as AggregateSnapshot

CommandHandler -> SnapshotAggregateService: get(EventStream, AggregateClass)
activate SnapshotAggregateService
SnapshotAggregateService -> SnapshotService: getLatestVersionedAggregate(...)
activate SnapshotService
SnapshotService -> SnapshotRepository: getLatestSnapshot(streamId)<<Not Available>>
activate SnapshotRepository
SnapshotService <-  SnapshotRepository: Optional<AggregateSnapshot>
deactivate SnapshotRepository
SnapshotService <-  SnapshotService:  Optional<Aggregate>
SnapshotAggregateService <-SnapshotService :Optional<Aggregate>
deactivate SnapshotService
SnapshotAggregateService -> DefaultAggregateService: getAggregate
activate DefaultAggregateService
DefaultAggregateService <-  DefaultAggregateService: Read Stream from initial stream version
DefaultAggregateService <-  DefaultAggregateService: applyEvents --> Aggregate
SnapshotAggregateService <-  DefaultAggregateService: Aggregate
deactivate DefaultAggregateService
CommandHandler <-  SnapshotAggregateService: Aggregate
deactivate SnapshotAggregateService

CommandHandler -> SnapshotAggregateService: get(EventStream, AggregateClass)
activate SnapshotAggregateService
SnapshotAggregateService -> SnapshotService: getLatestVersionedAggregate(...)
activate SnapshotService
SnapshotService -> SnapshotRepository: getLatestSnapshot(streamId)<<Available>>
activate SnapshotRepository
SnapshotService <-  SnapshotRepository: Optional<AggregateSnapshot>
deactivate SnapshotRepository
SnapshotService ->  AggregateSnapshot: getAggreagte
activate AggregateSnapshot
SnapshotService <-  AggregateSnapshot: Aggregate
deactivate AggregateSnapshot
SnapshotService <-  SnapshotService:  Optional<Aggregate>
SnapshotAggregateService <-SnapshotService :Optional<Aggregate>
deactivate SnapshotService
SnapshotAggregateService <-  SnapshotAggregateService: Read Stream from next version stream version
deactivate DefaultAggregateService
SnapshotAggregateService <-  DefaultAggregateService: applyEvents --> Aggregate
activate DefaultAggregateService
SnapshotAggregateService <-  DefaultAggregateService: Aggregate
deactivate DefaultAggregateService
CommandHandler <-  SnapshotAggregateService: Aggregate
deactivate SnapshotAggregateService

CommandHandler -> SnapshotAggregateService: get(EventStream, AggregateClass)
activate SnapshotAggregateService
SnapshotAggregateService -> SnapshotService: getLatestVersionedAggregate(...)
activate SnapshotService
SnapshotService -> SnapshotRepository: getLatestSnapshot(streamId)<<Rebuild Aggregate>>
activate SnapshotRepository
SnapshotService <-  SnapshotRepository: Optional<AggregateSnapshot>
deactivate SnapshotRepository
SnapshotService ->  AggregateSnapshot: getAggreagte
activate AggregateSnapshot
SnapshotService <-  AggregateSnapshot: throws DeserializationException
deactivate AggregateSnapshot
deactivate AggregateSnapshot
SnapshotAggregateService <-  SnapshotService:  throws AggregagateChangeDetectedException

deactivate SnapshotService
SnapshotAggregateService -> DefaultAggregateService: getAggregate
activate DefaultAggregateService
DefaultAggregateService <-  DefaultAggregateService: Read Stream from initial stream version
DefaultAggregateService <-  DefaultAggregateService: applyEvents --> Aggregate
SnapshotAggregateService <-  DefaultAggregateService: Aggregate
deactivate DefaultAggregateService
CommandHandler <-  SnapshotAggregateService: Aggregate
deactivate SnapshotAggregateService
@enduml